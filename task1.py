# Разработчик Фёдор очень любит печеньки в офисе, и он точно знает все N мест,
# где их можно найти, а также точное количество печенек Сn в каждом месте.
# Сегодня Фёдор особенно голоден, он закончил большую задачу,
# и решает выделить себе M часов на то, чтобы съесть все печеньки в офисе.
# Фёдор рассчитал минимальное количество печенек K, которое ему нужно съедать
# в течение часа так, чтобы в итоге успеть съесть все печеньки в офисе
# за выделенное время или раньше. В каждый час, он может посетить одно любое
# место с печеньками и съесть K печенек в этом месте, он потратит на это
# целый час, даже если в этом месте осталось меньше, чем K печенек, потому
# что будет обсуждать с коллегами задачи и планы. Места без печенек Фёдор
# может не посещать.
# Коллеги, из уважения к Фёдору, никогда не трогают его любимые печеньки

from math import ceil


n, m = input().split(" ")

n = int(n)  # Количество мест
m = int(m)  # Время на съедение

rooms_with_cookies = 0  # Учитываем только комнаты с печеньками, т.к пустые можно не посещать
cn = []

for _ in range(n):
    cookie_amount = int(input())

    if cookie_amount > 0:
        cn.append(cookie_amount)
        rooms_with_cookies += 1

# 0 Если в офисе нет печенек, или если Фёдор не успеет
# съесть все печеньки за выделенное время.
if sum(cn) == 0 or m < rooms_with_cookies:
    print(0)
elif m == rooms_with_cookies:
    print(max(cn))
else:

    def can_eat(trial_k):  # Проверка, соблюдения условий при указанном k
        total_time = 0  # Количество часов, которое потребуется на все печенье
        for cookies_in_room in cn:
            total_time += ceil(cookies_in_room/trial_k)

            if total_time > m:
                return False

        return bool(total_time <= m)

    # Двоичный поиск минимального k
    left = 1
    right = max(cn)

    min_k = 0
    while left <= right:
        mid = (left+right) // 2

        if can_eat(trial_k=mid):
            min_k = mid
            right = mid - 1
        else:
            left = mid + 1

    print(min_k)
